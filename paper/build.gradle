plugins {
    id 'java'
    id "io.papermc.paperweight.userdev" version "2.0.0-beta.16"
    id("xyz.jpenilla.run-paper") version "2.3.1"
}


repositories {
    mavenCentral()

    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    testImplementation platform("org.junit:junit-bom:$junit_version")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "ch.qos.logback:logback-classic:$logback_version"


    paperweight.paperDevBundle("${minecraft_version}-${paperweight_build}")


    implementation "org.json:json:$json_version"
    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
    implementation "org.eclipse.jetty:jetty-server:$jetty_server_version"
    implementation "org.eclipse.jetty:jetty-servlet:$jetty_servlet_version"

    implementation project(":common")
    implementation project(":core")

}


modrinth {

    token = System.getenv("MODRINTH_TOKEN")
    def log = System.getenv("CHANGELOG") ?: rootProject.file("changelog.md").text
    projectId = "${modrinth_id}"
    versionNumber = "${version}"
    versionType = "${build_status}"
    gameVersions = outlet.mcVersions()
    uploadFile = jar
    loaders = [project.name]
    syncBodyFrom = rootProject.file("readme.md").text
    dependencies {}
}

test {
    useJUnitPlatform()
}

tasks {
    runServer {
        minecraftVersion("${minecraft_version}")
    }

}

tasks.assemble {
    dependsOn(tasks.reobfJar)
}

processResources {
    def pluginProperties = [minecraft_version: minecraft_version, author: author, name: rootProject.name, project_version: project_version]
    inputs.properties pluginProperties
    filteringCharset 'UTF-8'

    filesMatching('paper-plugin.yml') {
        expand pluginProperties
    }
}
task copyGradleProperties(type: Copy) {
    from rootProject.file('gradle.properties')
    into "src/main/resources/"
}

tasks.processResources.dependsOn(copyGradleProperties)
//tasks.sourcesJar.dependsOn(copyGradleProperties)


tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

tasks.register('mergeJar', Jar) {

    //    archiveBaseName.set('fabric-with-core')

    from(sourceSets.main.output) // Include fabric classes

    from(project(':core').sourceSets.main.output)

    from(project(':common').sourceSets.main.output)

}


tasks.generateMetadataFileForMavenJavaPublication {
    dependsOn("mergeJar")
}

tasks.build {

    dependsOn('mergeJar')

//    dependsOn(tasks.reobfJar)
}

tasks.reobfJar {
    dependsOn("mergeJar")
}