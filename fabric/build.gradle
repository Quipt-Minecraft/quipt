plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
}


loom {
    mods {
        "quipt" {
            sourceSet sourceSets.main
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    includedDeps.extendsFrom()
//    test dependencies
}

tasks.register('mergeJar', Jar) {
    from(sourceSets.main.output) // Include fabric classes
    from(project(':core').sourceSets.main.output)
    from(project(':common').sourceSets.main.output)
    from(project(":bot").sourceSets.main.output)

    configurations.includedDeps.each { dep ->
        from(zipTree(dep)) {
            exclude "META-INF/**"
        }
    }

    // Make sure it doesn't conflict with remapJar output
    archiveClassifier = ""

    // Ensure there are no duplicate entries
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}



tasks.build {
    dependsOn('remapJar')
}





repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    includedDeps(implementation "org.json:json:$json_version")
    includedDeps(implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version")
    includedDeps(implementation "org.eclipse.jetty:jetty-server:$jetty_server_version")
    includedDeps(implementation "org.eclipse.jetty:jetty-servlet:$jetty_servlet_version")
    includedDeps(implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version")
    includedDeps(implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version")
    includedDeps(implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version")
    includedDeps(implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version")
    includedDeps(implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-toml:$jackson_version")
//    include(modImplementation( "net.kyori:adventure-api:4.19.0"))

    modImplementation include("net.kyori:adventure-platform-fabric:6.3.0")

    namedElements(implementation(project(":core")))
    namedElements(implementation(project(":common")))
    namedElements(implementation(project(":bot")))

//    implementation project(path: ":core"    ,   configuration: "namedElements"  )
//    implementation project(path: ":common"  , configuration: "namedElements"    )
//    implementation project(path: ":bot"     ,    configuration: "namedElements" )
}

snapshot = project.hasProperty("isSnapshot") ? project.property("isSnapshot") : snapshot
version = "${project_version}-MC${minecraft_version}-${build_number}" + (snapshot == true ? "-SNAPSHOT" : "")

if (snapshot) {
    println "Detected custom version '${version}', (${snapshot}) skipping Modrinth upload."

    // Disable Minotaur tasks
    tasks.matching { it.name.contains("modrinth") }.configureEach {
        enabled = false
    }
}

modrinth {

    token = System.getenv("MODRINTH_TOKEN")
    def log = System.getenv("CHANGELOG") ?: rootProject.file("changelog.md").text
    changelog = log
    projectId = "${modrinth_id}"
    versionNumber = "${version}"
    versionType = "${build_status}"
    gameVersions = outlet.mcVersions()
    uploadFile = remapJar
    loaders = [project.name]
    syncBodyFrom = rootProject.file("readme.md").text
    dependencies {}
}

test {
    useJUnitPlatform()
}


remapJar {
    input = tasks.mergeJar.archiveFile
    archiveClassifier = "dev"
}

tasks.generateMetadataFileForMavenJavaPublication {
    dependsOn(tasks.mergeJar)
}

processResources {
    inputs.property "version", project_version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", loader_version
    inputs.property "supported_minecraft_versions", supported_minecraft_versions
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project_version,
                "minecraft_version": minecraft_version,
                "loader_version": loader_version,
                "supported_minecraft_versions": supported_minecraft_versions
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 21 // or 17

    // Force Java version for all modules
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


