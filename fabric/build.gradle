plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
}


loom {
    mods {
        "quipt" {
            sourceSet sourceSets.main
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    includedDeps.extendsFrom(configurations.include)
}

tasks.register('mergeJar', Jar) {
    from(sourceSets.main.output) // Include fabric classes
    from(project(':core').sourceSets.main.output)
    from(project(':common').sourceSets.main.output)
    from(project(":bot").sourceSets.main.output)

    configurations.includedDeps.each { dep ->
        from(zipTree(dep)) {
            exclude "META-INF/**"
        }
    }
    // Make sure it doesn't conflict with remapJar output
    archiveClassifier = ""

    // Ensure there are no duplicate entries
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}



tasks.build {
    dependsOn('mergeJar')
}





repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    include(implementation "org.json:json:$json_version")
    include(implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version")
    include(implementation "org.eclipse.jetty:jetty-server:$jetty_server_version")
    include(implementation "org.eclipse.jetty:jetty-servlet:$jetty_servlet_version")

    include(implementation(project(":core")))
    include(implementation(project(":common")))
    include(implementation(project(":bot")))
}

modrinth {

    token = System.getenv("MODRINTH_TOKEN")
    def log = System.getenv("CHANGELOG") ?: rootProject.file("changelog.md").text
    projectId = "${modrinth_id}"
    versionNumber = "${version}"
    versionType = "${build_status}"
    gameVersions = outlet.mcVersions()
    uploadFile = mergeJar
    loaders = [project.name]
    syncBodyFrom = rootProject.file("readme.md").text
    dependencies {}
}

test {
    useJUnitPlatform()
}


remapJar {
    input = tasks.mergeJar.archiveFile
    archiveClassifier = "dev"
}

tasks.generateMetadataFileForMavenJavaPublication {
    dependsOn(tasks.mergeJar)
}

processResources {
    inputs.property "version", project_version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", loader_version
    inputs.property "supported_minecraft_versions", supported_minecraft_versions
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project_version,
                "minecraft_version": minecraft_version,
                "loader_version": loader_version,
                "supported_minecraft_versions": supported_minecraft_versions
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 21 // or 17

    // Force Java version for all modules
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


