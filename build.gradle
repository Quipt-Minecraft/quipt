import dex.plugins.outlet.v2.util.ReleaseType
import groovy.text.SimpleTemplateEngine

plugins {
    id 'java'
    id 'maven-publish'
    id 'fabric-loom' version '1.10-SNAPSHOT' apply false
    id 'io.github.dexman545.outlet' version '1.6.1' apply false
    id 'com.modrinth.minotaur' version '2.+' apply false
}

group = "com.quiptmc"
version = "${project_version}-MC${minecraft_version}-${build_status}.${build_number}"

repositories {
    mavenCentral()

}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}


allprojects {
    group = "com.quiptmc"
    version = "${project_version}-MC${minecraft_version}-${build_status}.${build_number}"

    repositories {
        mavenCentral()
    }
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    publishing {
        publications {
            create("mavenJava", MavenPublication) {
                artifactId = project.name
                from components.java
            }
        }
        repositories {
            maven {
                // Replace OWNER and REPOSITORY with your GitHub username or organization name and the repository name
                url "https://maven.pkg.github.com/Quipt-Minecraft/quipt"
                credentials {
                    username =System.getenv("PACKAGES_USERNAME")
                    password = System.getenv("PACKAGES_TOKEN")
                }
            }
        }

    }
    dependencies {
        implementation "org.json:json:$json_version"
        implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
        implementation "org.eclipse.jetty:jetty-server:$jetty_server_version"
        implementation "org.eclipse.jetty:jetty-servlet:$jetty_servlet_version"
    }
}

configure(subprojects.findAll {it.name == "fabric"}) {

    apply plugin: 'fabric-loom'

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    }
}

configure(subprojects.findAll { it.name == "paper" || it.name == "fabric" }) {
    apply plugin: 'com.modrinth.minotaur'
    apply plugin: 'io.github.dexman545.outlet'

    outlet {
        mcVersionRange = supported_minecraft_versions
        allowedReleaseTypes = Set.of(ReleaseType.RELEASE)
    }

    modrinth {

        token = "mrp_nqXWMlgBz9VF1wlJTeZa4l5fj1aCbislqlabfHmK5vhsI1Gtc7xa4uHMVKXp"
        def log = System.getenv("CHANGELOG") ?: rootProject.file("changelog.md").text
        projectId = "${modrinth_id}"
        versionNumber = "${version}"
        versionType = "${build_status}"
        gameVersions = outlet.mcVersions()
        uploadFile = jar
        loaders = [project.name]
        syncBodyFrom = rootProject.file("readme.md").text
        dependencies {}
    }

    tasks.modrinth.dependsOn(tasks.modrinthSyncBody)



    task discord {
        doLast {
            try {
                var channel = System.getenv("DISCORD_CHANNEL")
                var token = System.getenv("DISCORD_TOKEN")
                URL url = uri("https://discord.com/api/webhooks/$channel/$token").toURL()
                HttpURLConnection connection = (HttpURLConnection) url.openConnection()
                connection.setRequestMethod("POST")
                connection.setRequestProperty("Content-Type", "application/json; utf-8")
                connection.setRequestProperty("Accept", "application/json")
                connection.setDoOutput(true)


                // Read the file and process the template variables
                String jsonTemplate = rootProject.file("modrinth.json").text

                // Create a template engine and bind the variables
                def engine = new SimpleTemplateEngine()
                def template = engine.createTemplate(jsonTemplate)
                def binding = [
                        project: project,
                        rootProject: rootProject,
                        version: version,
                        modrinth_id: modrinth_id
                ]

                // Process the template with the bindings
                String jsonInputString = template.make(binding).toString()

                try (OutputStream os = connection.getOutputStream()) {
                    byte[] input = jsonInputString.getBytes("utf-8")
                    os.write(input, 0, input.length)
                }

                int responseCode = connection.getResponseCode()
                System.out.println("Response Code: " + responseCode)
            } catch (Exception e) {
                e.printStackTrace()
            }
        }
    }
    tasks.modrinth.dependsOn discord

    tasks.named('publish').configure {
        finalizedBy tasks.modrinth
    }

}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.name
            from components.java
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}






//tasks.modrinth.dependsOn sendDataToUrl

def targetJavaVersion = 21
java {
    withSourcesJar()
    withJavadocJar()
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}